import Config

# Configure your database
config :global_api, GlobalApi.Repo,
  hostname: System.get_env("DATABASE_HOSTNAME", "host.docker.internal"),
  username: System.get_env("DATABASE_USERNAME", "root"),
  password: System.get_env("DATABASE_PASSWORD", "global_api"),
  database: System.get_env("DATABASE_DATABASE", "global_api_dev"),
  pool_size: String.to_integer(System.get_env("DATABASE_POOL_SIZE", "3")),
  port: String.to_integer(System.get_env("DATABASE_PORT", "3306")),
  timeout: 25000

# we require local DNS (api.geysermc e.g.) in order to test
# the global api fully.
domain = "geysermc"

config :global_api, :domain_info,
  protocol: "http",
  api: %{
    domain: domain,
    subdomain: "api"
  },
  cdn: %{
    domain: domain,
    subdomain: "cdn"
  },
  link: %{
    domain: domain,
    subdomain: "link"
  },
  skin: %{
    domain: domain,
    subdomain: "skin"
  }

# Even in development mode we're using the real subdomains and most stuff also uses https,
# e.g. make sure that build.js tries to use http instead of https

config :global_api, :xbox_accounts_app_info,
  client_id: "client_id",
  redirect_url: "https://api.geysermc.org/v2/admin/xbox/token",
  client_secret: "client_secret"

config :global_api, :link_app_info,
  client_id: "client id",
  redirect_url: "https://link.geysermc.org/method/online",
  client_secret: "client secret"

config :global_api, :telemetry,
  host: nil,
  port: 8125,
  server_id: 1

# For development, we disable any cache and enable
# debugging and code reloading.
# The watcher is used to automatically copy changes from the assets dir to /priv/static
config :global_api, GlobalApiWeb.Endpoint,
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    # Start the esbuild watcher by calling Esbuild.install_and_run(:default, args)
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :global_api, GlobalApiWeb.Endpoint,
  http: [
    dispatch: [
      {:_, [
        {"/ws", GlobalApiWeb.WebSocket, []},
        {:_, Phoenix.Endpoint.Cowboy2Handler, {GlobalApiWeb.Endpoint, []}}
      ]}
    ],
    ip: {0, 0, 0, 0},
    port: String.to_integer(System.get_env("PORT") || "80"),
    transport_options: [socket_opts: [:inet]]
  ],
  url: [host: "api.geysermc"],
  static_url: [host: "cdn.geysermc"],
  pubsub_server: GlobalApi.PubSub,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"lib/global_api_web/(live|views)/.*(ex)$",
      ~r"lib/global_api_web/templates/.*(heex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# allow the open api spex to regenerate after recompiling without
# having to restart the application
config :open_api_spex, :cache_adapter, OpenApiSpex.Plug.NoneCache
